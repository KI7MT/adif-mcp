name: ci
on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: latest

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Sync deps (prefer dev group; frozen if lock)
        run: |
          set -e
          # log uv version for debugging
          uv --version || true
          # try newest syntax first; fall back for older uv
          if [ -f uv.lock ]; then
            uv sync --group dev --frozen || uv sync --frozen || uv sync
          else
            uv sync --group dev || uv sync
          fi

      - name: Lint (ruff)
        run: uv run ruff check .

      - name: Type-check (mypy)
        run: uv run mypy src

      - name: Tests (pytest)
        env:
          PYTHONWARNINGS: error
        run: uv run pytest -q

      - name: Manifest validate (CLI)
        run: uv run adif-mcp manifest-validate

      - name: Fetch tags
        run: git fetch --tags --force --prune

      - name: Read project version (pyproject)
        id: pj
        run: echo "version=$(uv run cz version --project)" >> "$GITHUB_OUTPUT"

      - name: Read latest git tag
        id: tag
        run: echo "tag=$(git describe --tags --abbrev=0 2>/dev/null || echo none)" >> "$GITHUB_OUTPUT"

      - name: Enforce pyproject == latest tag (when tag exists)
        if: steps.tag.outputs.tag != 'none'
        run: |
          PJ="v${{ steps.pj.outputs.version }}"
          TG="${{ steps.tag.outputs.tag }}"
          echo "pyproject: ${PJ}"
          echo "latest tag: ${TG}"
          test "$PJ" = "$TG" || { echo "::error ::Version mismatch"; exit 1; }

      - name: Enforce pushed tag matches pyproject (only on tag pushes)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          PJ="v$(uv run cz version --project)"
          TAG="${GITHUB_REF#refs/tags/}"
          echo "pyproject: ${PJ}"
          echo "pushed tag: ${TAG}"
          test "$PJ" = "$TAG" || { echo "::error ::Tag mismatch"; exit 1; }
