name: Manifest Validate

on:
  push:
    paths:
      - "**/manifest.json"
      - ".github/workflows/manifest-validate.yml"
  pull_request:
    paths:
      - "**/manifest.json"
      - ".github/workflows/manifest-validate.yml"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate:
    name: Validate MCP manifests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find manifests
        id: find
        run: |
          mapfile -t FILES < <(git ls-files | grep -E '(^|/)manifest\.json$' || true)
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No manifest.json files found."
            echo "count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          printf '%s\n' "${FILES[@]}"
          printf 'files<<EOF\n%s\nEOF\n' "$(printf '%s\n' "${FILES[@]}")" >> $GITHUB_OUTPUT
          echo "count=${#FILES[@]}" >> $GITHUB_OUTPUT

      - name: Install tools (jq, ajv-cli)
        if: steps.find.outputs.count != '0'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          npm install -g ajv-cli

      - name: Fetch MCP manifest schema
        if: steps.find.outputs.count != '0'
        run: |
          # NOTE: If the schema URL changes upstream, update this line.
          # This URL currently serves the v1 JSON Schema for MCP manifests.
          curl -fsSL \
            https://modelcontextprotocol.io/schemas/manifest.v1.json \
            -o /tmp/mcp-manifest.schema.json

          # Quick sanity check
          jq -r '.title, .$schema' /tmp/mcp-manifest.schema.json || {
            echo "::error::Failed to fetch/parse MCP manifest schema"
            exit 1
          }

      - name: Validate JSON syntax
        if: steps.find.outputs.count != '0'
        run: |
          ok=1
          while IFS= read -r f; do
            echo "ðŸ”Ž jq lint: $f"
            if ! jq empty "$f"; then
              echo "::error file=$f::Invalid JSON"
              ok=0
            fi
          done <<< "${{ steps.find.outputs.files }}"
          [ $ok -eq 1 ] || exit 1

      - name: Validate required tool fields (extra lint)
        if: steps.find.outputs.count != '0'
        run: |
          ok=1
          while IFS= read -r f; do
            echo "ðŸ”Ž checking tools[] in $f"
            tools=$(jq '.tools // []' "$f")

            count=$(echo "$tools" | jq 'length')
            if [ "$count" -eq 0 ]; then
              echo "::warning file=$f::No tools[] defined"
              continue
            fi

            for i in $(seq 0 $((count - 1))); do
              name=$(echo "$tools" | jq -r ".[$i].name // empty")
              desc=$(echo "$tools" | jq -r ".[$i].description // empty")
              schema=$(echo "$tools" | jq ".[$i].input_schema // empty")

              if [ -z "$name" ]; then
                echo "::error file=$f::Tool[$i] is missing 'name'"
                ok=0
              fi
              if [ -z "$desc" ]; then
                echo "::error file=$f::Tool[$i] is missing 'description'"
                ok=0
              fi
              if [ "$schema" = "null" ] || [ -z "$schema" ]; then
                echo "::error file=$f::Tool[$i] is missing 'input_schema'"
                ok=0
              fi
            done
          done <<< "${{ steps.find.outputs.files }}"
          [ $ok -eq 1 ] || exit 1

      - name: Validate against MCP schema (strict)
        if: steps.find.outputs.count != '0'
        run: |
          set -e
          # ajv strict: disallow additionalProperties, requireKnownFields
          while IFS= read -r f; do
            echo "ðŸ§ª ajv validate: $f"
            ajv validate \
              -s /tmp/mcp-manifest.schema.json \
              -d "$f" \
              --coerce-types \
              --strict=true \
              --all-errors
          done <<< "${{ steps.find.outputs.files }}"

      - name: Summary
        if: steps.find.outputs.count != '0'
        run: |
          echo "âœ… Validated ${{ steps.find.outputs.count }} manifest file(s)."
